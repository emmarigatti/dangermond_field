return(list(allowed = allowed_flow, rejected = rejected_flow))
}
#Stem to leaf constrained
J_stem_leaf_result <- constrained_flux(J_stem_leaf_raw, theta_stem, theta_r_stem, V_stem,
theta_leaf, theta_s_leaf, V_leaf, dt)
J_stem_leaf <- J_stem_leaf_result$allowed
J_stem_leaf_rejected <- J_stem_leaf_result$rejected
#Soil to stem constrained
J_soil_stem_result <- constrained_flux(J_soil_stem_raw, theta_soil, theta_r_soil, V_soil,
theta_stem, theta_s_stem, V_stem, dt)
J_soil_stem <- J_soil_stem_result$allowed
J_soil_stem_rejected <- J_soil_stem_result$rejected
#Theta equations
dtheta_soil <- - J_soil_stem/V_soil
dtheta_stem <- (J_soil_stem - J_stem_leaf)/V_stem
dtheta_leaf <- (J_stem_leaf - J_out)/V_leaf
return(list(c(dtheta_soil, dtheta_stem, dtheta_leaf),
psi_soil = psi_soil, psi_stem = psi_stem, psi_leaf = psi_leaf,
K_leaf = K_leaf, K_stem = K_stem, K_soil = K_soil,
ET = ET, beta = beta, J_stem_leaf = J_stem_leaf,
J_soil_stem = J_soil_stem, J_out = J_out
))
})
}
theta_init <- c(theta_soil = params$theta_s_soil,
theta_stem = params$theta_s_stem,
theta_leaf = params$theta_s_leaf)
time <- seq(0, 86400*110, by = dt)
out <- ode(y = theta_init, times = time, func = plant_hydraulics, parms = params, maxsteps = 100000)
out_df <- as.data.frame(out)
#Beta over time plot
ggplot(out_df, aes(x = theta_soil, y = beta)) +
geom_line(color = "purple", size = 1.2) +
labs(x = "theta_soil",
y = expression(beta),
title = expression("VPD = 1500 Pa")) +
theme_minimal()
VPD <- 500        #Pa
P <- 101325       #Pa
T <- 298          #K
R <- 8.314        #J/mol/K
gs_max_mol <- 0.3  #mol/m2/s
gs_min <- 8.93e-4 #m/s -- this is from Huntingford paper
gs_max <- gs_max_mol * (R * T / P)  #m/s
E_mass <- rho_a * 0.622 * ((gs_max * VPD) / P)  # kg/m2/s
E_vol <- E_mass / 1000  # Convert to m/s
alpha <- 0.6
FAPAR <- 1 - exp(-alpha * LAI)
#------------------------------------------------ Time step is a minute
dt <- 60
#------------------------------------------------ Parameter list
params <- list(
rho = 1000,
g = 9.81,
z_soil = 0,
z_stem = 0.5,
z_leaf = 1.0,
E_max = E_vol * FAPAR, # other option is 3.5e-8
# These are all from Huntingford paper
#alpha_gs = gs_max - gs_min,
#a_ABA = -1.4e-3,
#b_ABA = 4.0,
#beta_gs = -2.69e3,
#delta_gs = -0.183,
A_leaf = A_leaf,
V_leaf = V_leaf,
a_leaf = a_leaf,
v_leaf = v_leaf,
n_leaf = n_leaf,
A_stem = A_stem,
V_stem = V_stem,
A_soil = A_soil,
V_soil = V_soil,
SA_root = SA_root,
k_max_leaf = 1e-6, # change this
psi_50_leaf = -4.47e6, # From Skelton
psi_tlp_leaf = -3.5e6, # change this (was -2)
psi_sat_leaf = -6e4,
psi_min_leaf = -6e6,
theta_tlp_leaf = 0.4,
theta_r_leaf = 0.05,
theta_s_leaf = 0.75,
c = 100,
beta_max = 1,
e = 2,
h = 1e-5,
k_max_stem = 1e-6, # change this
psi_50_stem = -4.32e6, # From Skelton
psi_tlp_stem = -4e6, # change this (was -3)
psi_sat_stem = -4e4,
psi_min_stem = -6e6,
theta_tlp_stem = 0.3,
theta_r_stem = 0.05,
theta_s_stem = 0.5,
d = 100,
f = 3,
psi_s_soil = -2e4,
b = 4.9,
k_sat_soil = 3.47e-5,
theta_s_soil = 0.4,
theta_r_soil = 0.05,
W_soil = 0,
lambda = 2
)
#------------------------------------------------ODE Model
plant_hydraulics <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
# Water potential functions
#Sigmoid:
psi_leaf <- psi_min_leaf + ((psi_sat_leaf - psi_min_leaf) / (1 + exp(c * (theta_tlp_leaf - theta_leaf))))
psi_stem <- psi_min_stem + ((psi_sat_stem - psi_min_stem) / (1 + exp(d * (theta_tlp_stem - theta_stem))))
#Power law:
#psi_leaf <- (psi_tlp_leaf * ((theta_leaf - theta_r_leaf) / (theta_tlp_leaf - theta_r_leaf))^(-c))
#psi_stem <- (psi_tlp_stem * ((theta_stem - theta_r_stem) / (theta_tlp_stem - theta_r_stem))^(-d))
#Soil:
psi_soil <- psi_s_soil * (theta_soil / theta_s_soil)^(-lambda)
# Hydraulic conductivities
#Sigmoid:
#K_leaf <- k_max_leaf / ((1 + (abs(psi_leaf)/abs(psi_50_leaf)))^e)
#K_stem <- k_max_stem / ((1 + (abs(psi_stem)/abs(psi_50_stem)))^f)
#Weibull:
K_leaf <- k_max_leaf * exp(- (abs(psi_leaf) / abs(psi_50_leaf))^e)
K_stem <- k_max_stem * exp(- (abs(psi_stem) / abs(psi_50_stem))^f)
#Soil:
K_soil <- k_sat_soil * (theta_soil / theta_s_soil)^((2*b)+3)
# ET
beta <- beta_max / (1 + exp(-h * (psi_leaf - psi_50_leaf))) # Beta approaches 0
ET <- E_max * beta
J_out <- ET * A_leaf
#Raw fluxes
J_stem_leaf_raw <- -(K_stem / (rho * g)) * ((psi_leaf - psi_stem) / (z_leaf - z_stem)) * A_stem #
J_soil_stem_raw <- -(K_soil / (rho * g)) * ((psi_stem - psi_soil) / (z_stem - z_soil)) * SA_root
#Capping fluxes
constrained_flux <- function(flow, donor_theta, theta_r_donor, V_donor,
receiver_theta, theta_s_receiver, V_receiver, dt) {
# I need to be mindful of units so these are volumes here
donor_capacity <- (donor_theta - theta_r_donor) * V_donor      # m3
receiver_capacity <- (theta_s_receiver - receiver_theta) * V_receiver  # m3
max_volume_allowed <- min(donor_capacity, receiver_capacity)   # m3
# And then I'm converting the volume to max flow rate
# that can be moved within a single time step
max_flow_allowed <- max_volume_allowed / dt                    # m3/s
allowed_flow <- min(flow, max_flow_allowed)
rejected_flow <- flow - allowed_flow
return(list(allowed = allowed_flow, rejected = rejected_flow))
}
#Stem to leaf constrained
J_stem_leaf_result <- constrained_flux(J_stem_leaf_raw, theta_stem, theta_r_stem, V_stem,
theta_leaf, theta_s_leaf, V_leaf, dt)
J_stem_leaf <- J_stem_leaf_result$allowed
J_stem_leaf_rejected <- J_stem_leaf_result$rejected
#Soil to stem constrained
J_soil_stem_result <- constrained_flux(J_soil_stem_raw, theta_soil, theta_r_soil, V_soil,
theta_stem, theta_s_stem, V_stem, dt)
J_soil_stem <- J_soil_stem_result$allowed
J_soil_stem_rejected <- J_soil_stem_result$rejected
#Theta equations
dtheta_soil <- - J_soil_stem/V_soil
dtheta_stem <- (J_soil_stem - J_stem_leaf)/V_stem
dtheta_leaf <- (J_stem_leaf - J_out)/V_leaf
return(list(c(dtheta_soil, dtheta_stem, dtheta_leaf),
psi_soil = psi_soil, psi_stem = psi_stem, psi_leaf = psi_leaf,
K_leaf = K_leaf, K_stem = K_stem, K_soil = K_soil,
ET = ET, beta = beta, J_stem_leaf = J_stem_leaf,
J_soil_stem = J_soil_stem, J_out = J_out
))
})
}
theta_init <- c(theta_soil = params$theta_s_soil,
theta_stem = params$theta_s_stem,
theta_leaf = params$theta_s_leaf)
time <- seq(0, 86400*110, by = dt)
out <- ode(y = theta_init, times = time, func = plant_hydraulics, parms = params, maxsteps = 100000)
out_df <- as.data.frame(out)
#Beta over time plot
ggplot(out_df, aes(x = theta_soil, y = beta)) +
geom_line(color = "purple", size = 1.2) +
labs(x = "theta_soil",
y = expression(beta),
title = expression("VPD = 500 Pa")) +
theme_minimal()
#------------------------------------------------ODE Model
plant_hydraulics <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
# Water potential functions
#Sigmoid:
psi_leaf <- psi_min_leaf + ((psi_sat_leaf - psi_min_leaf) / (1 + exp(c * (theta_tlp_leaf - theta_leaf))))
psi_stem <- psi_min_stem + ((psi_sat_stem - psi_min_stem) / (1 + exp(d * (theta_tlp_stem - theta_stem))))
#Power law:
#psi_leaf <- (psi_tlp_leaf * ((theta_leaf - theta_r_leaf) / (theta_tlp_leaf - theta_r_leaf))^(-c))
#psi_stem <- (psi_tlp_stem * ((theta_stem - theta_r_stem) / (theta_tlp_stem - theta_r_stem))^(-d))
#Soil:
psi_soil <- psi_s_soil * (theta_soil / theta_s_soil)^(-lambda)
# Hydraulic conductivities
#Sigmoid:
#K_leaf <- k_max_leaf / ((1 + (abs(psi_leaf)/abs(psi_50_leaf)))^e)
#K_stem <- k_max_stem / ((1 + (abs(psi_stem)/abs(psi_50_stem)))^f)
#Weibull:
K_leaf <- k_max_leaf * exp(- (abs(psi_leaf) / abs(psi_50_leaf))^e)
K_stem <- k_max_stem * exp(- (abs(psi_stem) / abs(psi_50_stem))^f)
#Soil:
K_soil <- k_sat_soil * (theta_soil / theta_s_soil)^((2*b)+3)
# ET
# Stomatal down-regulation (logistic in Ïˆ_leaf)
beta <- beta_max / (1 + exp(-h * (psi_leaf - psi_50_leaf)))
# Well-watered gs per leaf area (or use a photosynthesis model to set this)
g_s_ww_leaf <- gs_max  # m s^-1
# Upscale to canopy per ground area (pick ONE; don't double-count FAPAR later)
LAI_eff <- LAI                 # or LAI * FAPAR
g_s_ww_can <- g_s_ww_leaf * LAI_eff   # m s^-1 (ground-ref)
# Use CURRENT VPD (pass it in params as `VPD`; change it between runs)
VPD_now <- VPD  # Pa
# Tww from vapor-side relation (no boundary layer)
Tww_mass <- rho_a * 0.622 * (g_s_ww_can * VPD_now) / P   # kg m^-2 s^-1
Tww      <- Tww_mass / 1000                              # m s^-1 per ground area
# Actual ET (per ground area) and outflow
ET   <- beta * Tww
J_out <- ET * canopy_area    # m^3 s^-1
#Raw fluxes
J_stem_leaf_raw <- -(K_stem / (rho * g)) * ((psi_leaf - psi_stem) / (z_leaf - z_stem)) * A_stem #
J_soil_stem_raw <- -(K_soil / (rho * g)) * ((psi_stem - psi_soil) / (z_stem - z_soil)) * SA_root
#Capping fluxes
constrained_flux <- function(flow, donor_theta, theta_r_donor, V_donor,
receiver_theta, theta_s_receiver, V_receiver, dt) {
# I need to be mindful of units so these are volumes here
donor_capacity <- (donor_theta - theta_r_donor) * V_donor      # m3
receiver_capacity <- (theta_s_receiver - receiver_theta) * V_receiver  # m3
max_volume_allowed <- min(donor_capacity, receiver_capacity)   # m3
# And then I'm converting the volume to max flow rate
# that can be moved within a single time step
max_flow_allowed <- max_volume_allowed / dt                    # m3/s
allowed_flow <- min(flow, max_flow_allowed)
rejected_flow <- flow - allowed_flow
return(list(allowed = allowed_flow, rejected = rejected_flow))
}
#Stem to leaf constrained
J_stem_leaf_result <- constrained_flux(J_stem_leaf_raw, theta_stem, theta_r_stem, V_stem,
theta_leaf, theta_s_leaf, V_leaf, dt)
J_stem_leaf <- J_stem_leaf_result$allowed
J_stem_leaf_rejected <- J_stem_leaf_result$rejected
#Soil to stem constrained
J_soil_stem_result <- constrained_flux(J_soil_stem_raw, theta_soil, theta_r_soil, V_soil,
theta_stem, theta_s_stem, V_stem, dt)
J_soil_stem <- J_soil_stem_result$allowed
J_soil_stem_rejected <- J_soil_stem_result$rejected
#Theta equations
dtheta_soil <- - J_soil_stem/V_soil
dtheta_stem <- (J_soil_stem - J_stem_leaf)/V_stem
dtheta_leaf <- (J_stem_leaf - J_out)/V_leaf
return(list(c(dtheta_soil, dtheta_stem, dtheta_leaf),
psi_soil = psi_soil, psi_stem = psi_stem, psi_leaf = psi_leaf,
K_leaf = K_leaf, K_stem = K_stem, K_soil = K_soil,
ET = ET, beta = beta, J_stem_leaf = J_stem_leaf,
J_soil_stem = J_soil_stem, J_out = J_out
))
})
}
theta_init <- c(theta_soil = params$theta_s_soil,
theta_stem = params$theta_s_stem,
theta_leaf = params$theta_s_leaf)
time <- seq(0, 86400*110, by = dt)
out <- ode(y = theta_init, times = time, func = plant_hydraulics, parms = params, maxsteps = 100000)
out_df <- as.data.frame(out)
#Beta over time plot
ggplot(out_df, aes(x = theta_soil, y = beta)) +
geom_line(color = "purple", size = 1.2) +
labs(x = "theta_soil",
y = expression(beta),
title = expression("VPD = 500 Pa")) +
theme_minimal()
#------------------------------------------------ Parameter list
params <- list(
rho = 1000,
g = 9.81,
z_soil = 0,
z_stem = 0.5,
z_leaf = 1.0,
E_max = E_vol * FAPAR, # other option is 3.5e-8
# These are all from Huntingford paper
#alpha_gs = gs_max - gs_min,
#a_ABA = -1.4e-3,
#b_ABA = 4.0,
#beta_gs = -2.69e3,
#delta_gs = -0.183,
A_leaf = A_leaf,
V_leaf = V_leaf,
a_leaf = a_leaf,
v_leaf = v_leaf,
n_leaf = n_leaf,
A_stem = A_stem,
V_stem = V_stem,
A_soil = A_soil,
V_soil = V_soil,
SA_root = SA_root,
k_max_leaf = 1e-6, # change this
psi_50_leaf = -4.47e6, # From Skelton
psi_tlp_leaf = -3.5e6, # change this (was -2)
psi_sat_leaf = -6e4,
psi_min_leaf = -6e6,
theta_tlp_leaf = 0.4,
theta_r_leaf = 0.05,
theta_s_leaf = 0.75,
c = 100,
beta_max = 1,
e = 2,
h = 1e-5,
k_max_stem = 1e-6, # change this
psi_50_stem = -4.32e6, # From Skelton
psi_tlp_stem = -4e6, # change this (was -3)
psi_sat_stem = -4e4,
psi_min_stem = -6e6,
theta_tlp_stem = 0.3,
theta_r_stem = 0.05,
theta_s_stem = 0.5,
d = 100,
f = 3,
psi_s_soil = -2e4,
b = 4.9,
k_sat_soil = 3.47e-5,
theta_s_soil = 0.4,
theta_r_soil = 0.05,
W_soil = 0,
lambda = 2
)
#------------------------------------------------ODE Model
plant_hydraulics <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
# ---------- helpers ----------
clamp01 <- function(x, lo, hi) pmin(pmax(x, lo), hi)
weibullK <- function(psi, Kmax, psi50, shape) {
# hits 0.5*Kmax at psi50
Kmax * exp(-log(2) * (abs(psi) / abs(psi50))^shape)
}
# ---------- Î¸ -> Ïˆ relations ----------
# Use moderate steepness so Ïˆ changes smoothly with Î¸ (not a step)
psi_leaf <- psi_min_leaf + ( (psi_sat_leaf - psi_min_leaf) /
(1 + exp(c * (theta_tlp_leaf - theta_leaf))) )
psi_stem <- psi_min_stem + ( (psi_sat_stem - psi_min_stem) /
(1 + exp(d * (theta_tlp_stem - theta_stem))) )
psi_soil <- psi_s_soil * (theta_soil / theta_s_soil)^(-lambda)
# ---------- hydraulic conductivities ----------
K_leaf <- weibullK(psi_leaf, k_max_leaf, psi_50_leaf, e)
K_stem <- weibullK(psi_stem, k_max_stem, psi_50_stem, f)
# Soil K(Î¸); clamp to avoid Î¸ > Î¸s blow-ups
theta_soil_eff <- clamp01(theta_soil, theta_r_soil, theta_s_soil)
K_soil <- k_sat_soil * (theta_soil_eff / theta_s_soil)^((2*b) + 3)
# ---------- stomatal down-regulation (Î²(Ïˆ_leaf)) ----------
# Choose h so Î² transitions over ~1 MPa: h â‰ˆ 2e-6 Pa^-1 is a good start.
beta <- beta_max / (1 + exp(-h * (psi_leaf - psi_50_leaf)))
# ---------- atmosphere coupling (WELL-WATERED demand inside the ODE) ----------
# Reference: per GROUND area
g_s_ww_leaf <- gs_max                          # m s^-1 (leaf)
LAI_eff     <- LAI                             # or LAI * FAPAR; do NOT multiply again later
g_s_ww_can  <- g_s_ww_leaf * LAI_eff          # m s^-1 (ground-referenced)
# Optional aerodynamics: g_tw = (g_s || g_a). If g_a = Inf, this reduces to g_s.
g_tw <- if (is.finite(g_a)) (g_s_ww_can * g_a) / (g_s_ww_can + g_a) else g_s_ww_can
VPD_now <- VPD                                # Pa (scalar or time-varying if you later interpolate)
Tww_mass <- rho_a * 0.622 * (g_tw * VPD_now) / P   # kg m^-2 s^-1
Tww      <- Tww_mass / 1000                        # m s^-1 (per ground area)
ET       <- beta * Tww                              # m s^-1 (per ground area)
J_out    <- ET * canopy_area                        # m^3 s^-1
# ---------- raw hydraulic fluxes ----------
# Use an effective rootâ€“soil contact area to avoid unrealistically large G_soil
SA_root_eff <- SA_root * phi_root
J_stem_leaf_raw <- -(K_stem / (rho * g)) *
((psi_leaf - psi_stem) / (z_leaf - z_stem)) * A_stem
J_soil_stem_raw <- -(K_soil / (rho * g)) *
((psi_stem - psi_soil) / (z_stem - z_soil)) * SA_root_eff
# ---------- capacity caps (volume-balance guards) ----------
constrained_flux <- function(flow, donor_theta, theta_r_donor, V_donor,
receiver_theta, theta_s_receiver, V_receiver, dt) {
donor_capacity    <- pmax((donor_theta - theta_r_donor) * V_donor, 0)         # m^3
receiver_capacity <- pmax((theta_s_receiver - receiver_theta) * V_receiver, 0)# m^3
max_volume_allowed <- pmin(donor_capacity, receiver_capacity)                 # m^3
max_flow_allowed   <- max_volume_allowed / dt                                 # m^3 s^-1
allowed  <- pmin(flow, max_flow_allowed)
rejected <- flow - allowed
list(allowed = allowed, rejected = rejected)
}
# Apply caps
stem_leaf_cap <- constrained_flux(J_stem_leaf_raw, theta_stem, theta_r_stem, V_stem,
theta_leaf, theta_s_leaf, V_leaf, dt)
J_stem_leaf <- stem_leaf_cap$allowed
J_stem_leaf_rej <- stem_leaf_cap$rejected
soil_stem_cap <- constrained_flux(J_soil_stem_raw, theta_soil, theta_r_soil, V_soil,
theta_stem, theta_s_stem, V_stem, dt)
J_soil_stem <- soil_stem_cap$allowed
J_soil_stem_rej <- soil_stem_cap$rejected
# ---------- Î¸ ODEs ----------
dtheta_soil <- - J_soil_stem / V_soil
dtheta_stem <-  (J_soil_stem - J_stem_leaf) / V_stem
dtheta_leaf <-  (J_stem_leaf - J_out) / V_leaf
# ---------- diagnostics (to see the regime youâ€™re in) ----------
G_soil   <- (K_soil/(rho*g)) * (SA_root_eff/(z_stem - z_soil))       # m^3 s^-1 Pa^-1
G_stem   <- (K_stem/(rho*g)) * (A_stem     /(z_leaf - z_stem))       # m^3 s^-1 Pa^-1
g_sp_eff <- 1 / (1/G_soil + 1/G_stem)                                # series
Qsl_star <- g_sp_eff * (psi_soil - psi_leaf)                         # m^3 s^-1 (supply if steady-state)
demand_flux <- Tww * canopy_area                                     # m^3 s^-1
ratio_dem_supply <- demand_flux / (Qsl_star + 1e-30)                 # >1 â‡’ supply-limited
cap_leaf <- as.numeric(J_stem_leaf_raw > J_stem_leaf)
cap_soil <- as.numeric(J_soil_stem_raw > J_soil_stem)
return(list(c(dtheta_soil, dtheta_stem, dtheta_leaf),
# state-like outputs
psi_soil = psi_soil, psi_stem = psi_stem, psi_leaf = psi_leaf,
K_leaf = K_leaf, K_stem = K_stem, K_soil = K_soil,
# atmosphere coupling
beta = beta, Tww = Tww, ET = ET, J_out = J_out, g_tw = g_tw,
# fluxes (raw + constrained)
J_stem_leaf_raw = J_stem_leaf_raw, J_soil_stem_raw = J_soil_stem_raw,
J_stem_leaf = J_stem_leaf, J_soil_stem = J_soil_stem,
J_stem_leaf_rej = J_stem_leaf_rej, J_soil_stem_rej = J_soil_stem_rej,
# diagnostics
G_soil = G_soil, G_stem = G_stem, g_sp_eff = g_sp_eff,
Qsl_star = Qsl_star, demand_flux = demand_flux, ratio_dem_supply = ratio_dem_supply,
cap_leaf = cap_leaf, cap_soil = cap_soil
))
})
}
library(deSolve)
library(dplyr)
run_case <- function(VPD_val, hours = 1) {
p <- params
p$VPD <- VPD_val                # MAKE SURE plant_hydraulics reads params$VPD
out <- ode(y = theta_init, times = time, func = plant_hydraulics,
parms = p, maxsteps = 1e6)
df <- as.data.frame(out)
w <- df$time <= hours*3600      # summarize over first 'hours' hours
m <- function(x) mean(x[w], na.rm = TRUE)
data.frame(
VPD = VPD_val,
Tww_mean  = m(df$Tww),                    # well-watered demand (m s^-1, ground)
ET_mean   = m(df$ET),                     # stressed ET (m s^-1, ground)
Jout_mean = m(df$J_out),                  # actual volume flux (m^3 s^-1)
dem_sup_ratio = m(df$ratio_dem_supply),   # >1 â‡’ supply-limited
cap_leaf_pct  = 100*mean(df$cap_leaf[w], na.rm=TRUE),
cap_soil_pct  = 100*mean(df$cap_soil[w], na.rm=TRUE)
)
}
res <- bind_rows(run_case(500), run_case(1000), run_case(1500)) %>%
mutate(
ET_scale_vs_500 = ET_mean / ET_mean[VPD==500],
regime = case_when(
dem_sup_ratio > 1.5 ~ "supply-limited",
dem_sup_ratio < 2/3 ~ "demand-limited",
TRUE ~ "co-limited"
)
)
print(res, row.names = FALSE)
#------------------------------------------------ODE Model
plant_hydraulics <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
# Water potential functions
#Sigmoid:
psi_leaf <- psi_min_leaf + ((psi_sat_leaf - psi_min_leaf) / (1 + exp(c * (theta_tlp_leaf - theta_leaf))))
psi_stem <- psi_min_stem + ((psi_sat_stem - psi_min_stem) / (1 + exp(d * (theta_tlp_stem - theta_stem))))
#Power law:
#psi_leaf <- (psi_tlp_leaf * ((theta_leaf - theta_r_leaf) / (theta_tlp_leaf - theta_r_leaf))^(-c))
#psi_stem <- (psi_tlp_stem * ((theta_stem - theta_r_stem) / (theta_tlp_stem - theta_r_stem))^(-d))
#Soil:
psi_soil <- psi_s_soil * (theta_soil / theta_s_soil)^(-lambda)
# Hydraulic conductivities
#Sigmoid:
#K_leaf <- k_max_leaf / ((1 + (abs(psi_leaf)/abs(psi_50_leaf)))^e)
#K_stem <- k_max_stem / ((1 + (abs(psi_stem)/abs(psi_50_stem)))^f)
#Weibull:
K_leaf <- k_max_leaf * exp(- (abs(psi_leaf) / abs(psi_50_leaf))^e)
K_stem <- k_max_stem * exp(- (abs(psi_stem) / abs(psi_50_stem))^f)
#Soil:
K_soil <- k_sat_soil * (theta_soil / theta_s_soil)^((2*b)+3)
# ET
beta <- beta_max / (1 + exp(-h * (psi_leaf - psi_50_leaf))) # Beta approaches 0
ET <- E_max * beta
J_out <- ET * A_leaf
#Raw fluxes
J_stem_leaf_raw <- -(K_stem / (rho * g)) * ((psi_leaf - psi_stem) / (z_leaf - z_stem)) * A_stem #
J_soil_stem_raw <- -(K_soil / (rho * g)) * ((psi_stem - psi_soil) / (z_stem - z_soil)) * SA_root
#Capping fluxes
constrained_flux <- function(flow, donor_theta, theta_r_donor, V_donor,
receiver_theta, theta_s_receiver, V_receiver, dt) {
# I need to be mindful of units so these are volumes here
donor_capacity <- (donor_theta - theta_r_donor) * V_donor      # m3
receiver_capacity <- (theta_s_receiver - receiver_theta) * V_receiver  # m3
max_volume_allowed <- min(donor_capacity, receiver_capacity)   # m3
# And then I'm converting the volume to max flow rate
# that can be moved within a single time step
max_flow_allowed <- max_volume_allowed / dt                    # m3/s
allowed_flow <- min(flow, max_flow_allowed)
rejected_flow <- flow - allowed_flow
return(list(allowed = allowed_flow, rejected = rejected_flow))
}
#Stem to leaf constrained
J_stem_leaf_result <- constrained_flux(J_stem_leaf_raw, theta_stem, theta_r_stem, V_stem,
theta_leaf, theta_s_leaf, V_leaf, dt)
J_stem_leaf <- J_stem_leaf_result$allowed
J_stem_leaf_rejected <- J_stem_leaf_result$rejected
#Soil to stem constrained
J_soil_stem_result <- constrained_flux(J_soil_stem_raw, theta_soil, theta_r_soil, V_soil,
theta_stem, theta_s_stem, V_stem, dt)
J_soil_stem <- J_soil_stem_result$allowed
J_soil_stem_rejected <- J_soil_stem_result$rejected
#Theta equations
dtheta_soil <- - J_soil_stem/V_soil
dtheta_stem <- (J_soil_stem - J_stem_leaf)/V_stem
dtheta_leaf <- (J_stem_leaf - J_out)/V_leaf
return(list(c(dtheta_soil, dtheta_stem, dtheta_leaf),
psi_soil = psi_soil, psi_stem = psi_stem, psi_leaf = psi_leaf,
K_leaf = K_leaf, K_stem = K_stem, K_soil = K_soil,
ET = ET, beta = beta, J_stem_leaf = J_stem_leaf,
J_soil_stem = J_soil_stem, J_out = J_out
))
})
}
